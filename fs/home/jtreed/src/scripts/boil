#!/bin/bash

function git_init() {
git init
git add .
git commit -m 'Initialize project'
git checkout -b working
}

if [ -z "$2" ]; then
	out=/dev/stdout
else
	case "$1" in
		"node")	out=$2.js;;
		"sh");&
		"bash");&
		"zsh");&
		"fish");&
		"express");&
		"network") out="$2";;
		*)	out="$2.$1";;
	esac
fi

case "$1" in
	"sh")	echo '#!/bin/sh' > $out;;
	"bash")	echo '#!/bin/bash' > $out;;
	"zsh")	echo '#!/usr/bin/zsh' > $out;;
	"fish")	echo '#!/usr/bin/fish' > $out;;
	"py")   echo '#!/usr/bin/python' > $out;;
	"rb")   echo '#!/usr/bin/ruby' > $out;;
	"html")	cat << EOF > $out;;
<!doctype html>
<html lang="en">
<head>
	<title></title>
	<link href="" rel="stylesheet" type="text/css" />
	<script src=""></script>
	<meta name="viewport" content="width=device-width" />
</head>
<body>
</body>
</html>
EOF
"cpp")	cat << EOF > $out;;
#include <iostream>

using namespace std;

int main(int argc, char** argv) {

}
EOF
"h")	upper=$(echo $2 | tr a-z A-Z); cat << EOF > $out;;
#ifndef ${upper}_H
#define ${upper}_H



#endif // ${upper}_H
EOF
"java")	cat << EOF > $out;;
//package;

//import;

public class ${2} {
	public ${2}() {

}
}
EOF
"js")	echo '#!/usr/bin/node' > $out;;
"node")	cat << EOF > $out
#!/usr/bin/node
process.env.NODE_ENV = 'debug';
const package = require('./package.json');
const u = require('./util');

var Logger = require('logger');
var logger = Logger.get('main', u.l());
logger.info(\`Starting \${package.name} v\${package.version}\`);

logger.debug('Loading dependencies...');
logger.info('Loaded dependencies.');

logger.debug('Reciting the magic numbers...');
var globals = {
				add: (name, obj) => {globals[name] = obj; return globals;}
			};
globals.add('logger', logger);
logger.info('Recited the magic numbers.');

logger.info('Ready to comply.');

module.exports = globals;
EOF
cat << EOF > util.js;;
module.exports = {
				P:      (obj) => Promise.resolve(obj),
				p:      (obj) => JSON.stringify(obj, null, '\t'),
				s:      (obj) => {
												if(typeof(obj)==='string') return obj;
												if(Array.isArray(obj)) return obj.join(' ');
												return obj.toString();
											},
				a:      (obj) => {
												if(Array.isArray(obj)) return obj;
												if(typeof(obj)==='string') return obj.split(' ');
												return obj.toString();
											},
				d:      () => process.env.NODE_ENV === 'debug',
				l:      (level='debug') => module.exports.d()?level:'info' // if we're debuggo, return input; otherwise, return 'info'
			};
EOF
"tex")	cat << EOF > $out;;
\documentclass{article}

\usepackage{amsmath}
\usepackage{enumerate}
\usepackage{xcolor}

\begin{document}
\end{document}
EOF
"network") cat << EOF > $out;;
Interface=wlan0
Connection=wireless
Security=wpa
IP=dhcp
#IP=static
#IPCustom=('addr add dev wlan0 192.168.1.23/24 brd +' 'route add default via 192.168.1.1')
#DNS=('192.168.1.1')
#Gateway='192.168.1.1'
#Address=('192.168.1.2/24') # is this supposed to match the IPCustom line?
# are both IPCustom and Address supposed to be enabled at the same time? I feel like no, given the 'addr add' and 'route add default'
ESSID='${3:-}'
Key=''
EOF
"express") mkdir $out
	cd $out
	cp -r ~/src/express-template/* ~/src/express-template/.gitignore .

esac

if [ ! -z "$2" ]; then # perform actions to prep files
	case $1 in
		"sh")	;&
		"bash")	;&
		"zsh")	;&
		"fish")	;&
		"py")   ;&
		"rb")   ;&
		"js")	chmod +x $out;;
		"node")	chmod +x $out
			npm init
			npm i ~/src/logger;;
		"express")
			npm install
			git_init
			out=package.json
			;;
		"network")
			sudo mv $out /etc/netctl
			out=/etc/netctl/$out;;
	esac
fi

$EDITOR $out
